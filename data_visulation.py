# -*- coding: utf-8 -*-
"""data visulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sgXUVWPzUoiKtIU5Wbtif5wtDL3Z5AoH
"""

#import librabies
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

customers_df = pd.read_csv('blinkit_customers.csv')
order_items_df = pd.read_csv('blinkit_order_items.csv')
products_df = pd.read_csv('blinkit_products.csv')
orders_df = pd.read_csv('blinkit_orders.csv')

customers_df.info()

order_items_df.info()

products_df.info()

orders_df.info()

#to see first 5 rows
customers_df.head()

order_items_df.head()

products_df.head()

orders_df.head()

#set the canvas size
plt.rcParams['figure.figsize'] = (10, 7)

#What is the distribution of customer segments (New, Regular, Premium, etc.) across different areas?
sns.set(style="whitegrid")
segment_distribution = pd.crosstab(customers_df['area'], customers_df['customer_segment'])
segment_distribution.plot(kind='bar', stacked=True, figsize=(14, 7), colormap='viridis')
plt.title("Distribution of Customer Segments Across Areas", fontsize=16)
plt.xlabel("Area", fontsize=12)
plt.ylabel("Number of Customers", fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.legend(title='Customer Segment')
plt.tight_layout()
plt.show()

#How does the average order value differ among different customer segments?
#mearge and group
merged = pd.merge(orders_df, customers_df, on="customer_id")
avg_order = merged.groupby("customer_segment")["order_total"].mean().sort_values(ascending=False)

sns.barplot(x=avg_order.index, y=avg_order.values, palette="Set2")
plt.title("Avg Order Value by Segment")
plt.xlabel("Segment")
plt.ylabel("Avg Order Value (₹)")
plt.tight_layout()
plt.show()

#Top 10 Most Ordered Product
#Which products are ordered the most (by quantity)?

# Merge order items with product names
order_items_with_names = pd.merge(order_items_df, products_df, on="product_id")

# Group by product name and get total quantity ordered
top_products = order_items_with_names.groupby("product_name")["quantity"].sum().sort_values(ascending=False).head(10)

sns.barplot(x=top_products.values, y=top_products.index, palette="crest")
plt.title("Top 10 Most Ordered Products by Quantity")
plt.xlabel("Total Quantity Ordered")
plt.ylabel("Product Name")
plt.tight_layout()
plt.show()

#Which product categories contribute the most to total revenue?

# Merge order items with product details
merged = pd.merge(order_items_df, products_df, on="product_id")

# Calculate revenue
merged["revenue"] = merged["quantity"] * merged["unit_price"]

# Group by category and sum revenue
category_revenue = merged.groupby("category")["revenue"].sum().sort_values(ascending=False)

sns.barplot(x=category_revenue.values, y=category_revenue.index, palette="mako")
plt.title("Revenue Contribution by Product Category")
plt.xlabel("Total Revenue (₹)")
plt.ylabel("Product Category")
plt.gca().invert_yaxis()  # To display the highest bar at the top
plt.tight_layout()
plt.show()

#What is the average price of products for each brand?
products_df.info()

# Group by brand and calculate average unit price
avg_price_per_brand = products_df.groupby('brand')['price'].mean().sort_values(ascending=False)

avg_price_per_brand = avg_price_per_brand.head(10)

plt.bar(avg_price_per_brand.index, avg_price_per_brand.values, color='skyblue')

plt.title("Average Product Price by Brand (Top 10)")
plt.xlabel("Brand Name")
plt.ylabel("Average Unit Price (₹)")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# How has the number of orders changed over the months?
orders_df.info()

# Convert order_date to datetime
orders_df['order_date'] = pd.to_datetime(orders_df['order_date'])

# Create a Year-Month column
orders_df['year_month'] = orders_df['order_date'].dt.to_period('M').astype(str)

# Group by year-month and count orders
monthly_orders = orders_df.groupby('year_month').size()

plt.plot(monthly_orders.index, monthly_orders.values, marker='o', linestyle='-', color='purple')

plt.title("Monthly Order Trend Over Time", fontsize=14)
plt.xlabel("Month")
plt.ylabel("Number of Orders")
plt.xticks(rotation=45, ha='right')
plt.grid(True)
plt.tight_layout()
plt.show()

# How often are deliveries on time vs late
plt.figure(figsize=(6, 5))
sns.countplot(x='delivery_status', data=orders_df, palette='Set2')

plt.title("Delivery Status: On Time vs Late")
plt.xlabel("Delivery Status")
plt.ylabel("Number of Orders")
plt.tight_layout()
plt.show()

# What are the most commonly used payment methods
payment_counts = orders_df['payment_method'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(payment_counts.values, labels=payment_counts.index, autopct='%1.1f%%')
plt.title("Payment Methods")
plt.axis('equal')
plt.tight_layout()
plt.show()

# What is the average delivery delay for orders?

# Convert to datetime
orders_df['promised_delivery_time'] = pd.to_datetime(orders_df['promised_delivery_time'])
orders_df['actual_delivery_time'] = pd.to_datetime(orders_df['actual_delivery_time'])

# Calculate delivery delay in minutes
orders_df['delivery_delay_mins'] = (orders_df['actual_delivery_time'] - orders_df['promised_delivery_time']).dt.total_seconds() / 60

#Filter out extreme outliers
filtered_delays = orders_df['delivery_delay_mins']
filtered_delays = filtered_delays[filtered_delays.between(-120, 240)]

# Plot histogram with KDE

sns.histplot(filtered_delays, bins=40, kde=True, color='blue')
plt.title("Delivery Delay Distribution (in Minutes)")
plt.xlabel("Delivery Delay (minutes)")
plt.ylabel("Number of Orders")
plt.axvline(0, color='red', linestyle='--', label='On Time')
plt.legend()
plt.tight_layout()
plt.show()

# Which stores generate the highest average order value?

# Group by store and calculate average order value
avg_order_value_by_store = orders_df.groupby('store_id')['order_total'].mean().sort_values(ascending=False)

# Show top 10 stores
top_stores = avg_order_value_by_store.head(10)

plt.bar(top_stores.index.astype(str), top_stores.values, color='pink')
plt.title("Top 10 Stores by Average Order Value")
plt.xlabel("Store ID")
plt.ylabel("Average Order Value (₹)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

